---
title: "Salary Study"
author: "SU Member"
format: html
editor: visual
---

```{r load data}

library(dplyr)
#install.packages("arrow")
library(arrow)
library(knitr)
library(kableExtra)

rm(list = ls())

filledPositions <- read.csv("filled_positions_info.csv")
full_p65 <- read_parquet("full_p65_with_nearest.parquet")
# Filling in where we can with ranges.
classOutline <- read.csv("classOutline.csv")
missingCount <- read.csv("missing_class_count.csv")

# Create BU description table.
BU = c("AA",
"AP",
"BB",
"CC",
"EE",
"GC",
"GP",
"KK",
"LL",
"MM",
"SS",
"TA",
"TM",
"XA",
"XE",
"XJ",
"XL",
"XP")
BU_Desc = c("PSEA Public Safety Officers",
"PSEA Airport Police & Fire Officers",
"National Marine Engineers' Beneficial Association",
"Masters, Mates & Pilots",
"Executive Branch Employees Excluded from Existing Units",
"ACOA Correctional Officers Unit",
"ASEA General Government (GG/GP/GY/GZ)",
"CEA Confidential Employees",
"LTC Labor, Trades & Crafts",
"Inlandboatmen's Union",
"APEA Supervisory",
"Alaska Vocational Technical Teacher Association",
"Teachers' Education Association of Mt. Edgecumbe",
"Alaska Aerospace Corporation",
"Partially Exempt & Exempt Executive Branch Employees / Postsecondary Education",
"Judicial Branch Exempt Employees / Judicial Branch (Judges)",
"Legislative Branch Employees",
"Attorneys and legal employees")

buLookup <- data.frame(BU, BU_Desc)

```

```{r organize and prep data}

# Re-label some of the BU designations.
filledPositions$BU[filledPositions$BU %in%
                     c("GG", "GP", "GY", "GZ")] = "GP"

# BU wasn't repeated in the salary study. 
posCount <- filledPositions %>%
  group_by(JCC) %>%
  summarize(nMatches = n()) %>%
  ungroup()

full_p65 <- full_p65 %>%
  left_join(posCount, by=c("code" = "JCC"))

full_p65 <- full_p65 %>%
  left_join(missingCount, by=c("code"))

full_p65 <- full_p65 %>%
  mutate(
    nMatches = if_else(is.na(nMatches), nMatchesSalStudy, nMatches)
  )

# Set nMatches = NA if no market salary is posted.
full_p65$nMatches[which(is.na(full_p65$market_target_annual_salary))] = NA

#  missingFromPosCount <- full_p65 %>%
#    filter(is.na(nMatches) & step == "A")

# Small data frame to try and get step into the jobs classes.
rangeByClass <- classOutline %>%
  select(Class_Code, Range)

# Exclude positions not included in the class outline.
# 
filledPositions_withRange <- filledPositions %>%
  left_join(rangeByClass, by=c("JCC" = "Class_Code")) %>%
  filter(!is.na(Range))

```

## Salary Study Information

In 2024, the Legislature of the State of Alaska Commissioned a salary study to ...

## Understanding the data

The salary study conducted by The Segal Group included 403 positions descriptions. This group includes 36 positions that either have not been allocated or are not currently occupied. The occupied positions included cover 7350 active employees out of roughly 17,100 positions (43%). Of these 17,000 positions, just over 14,300 are described by the SoA Class outline. (https://doa.alaska.gov/dop/classification/classOutline/classOutline.xlsx). The remaining 2,700 employees, consisting largely of executive judicial, legislative, labor, trades, along with many non-classified positions.

```{r supporting code for above statement}

includedPositions = (full_p65 %>%
  filter(step == "A") %>%
  select(code))$code

countStudyPositions = nrow(filter(full_p65, 
                                  step == "A"))

occupiedByPosition <- filledPositions_withRange %>% 
  group_by(JCC) %>%
  summarize(count = n())

countOccupiedPositions = nrow(occupiedByPosition)

EmplCovered <- full_p65 %>%
  filter(step == "A" & is.na(nMatchesSalStudy)) %>%
  summarize(totalCovered = sum(nMatches, na.rm=TRUE))

```

## Comparing the information

To better understand which state employees where covered and how that might influence what we are seeing, several tables have been provided below comparing different aspects of positions. 

### Employees by bargaining unit

To understand the first table below the 'Total employees' column represents the number of active employees for each bargaining unit. The 'Percent of all employees' column represents the percentage of all employees accounted for in this table (not including employees in bargaining units not covered at all by the Salary study). The column 'Study employees' are the number of employees who's positions are directly evaluated by the salary study. The percent of all employees included column shows the percentage of all employees who's positions are covered. In a reasonably representative sample of positions, the first two percent columns should be nearly equal. For instance, CEA Confidential employees both columns are 1.3%, this shows parity. However, APEA Supervisory is 17% vs. 13%, indicating that more SU members are included. This disparity is not great, and may be the product of random chance. The final column is the percentage of directly included employees compared to the total. Ideally, all of these going down the columns should be close to equal and also close to the figure of 43% included. Most BU's are reasonably equally represented with public safety and corrections having substantially more coverage, likely due to a narrower range of classifications. Covered executive positions were covered with the smallest percentage, likely due to a broad range of position types. However, when comparing the total populations for each group 


```{r}

studyEmplByBU <- full_p65 %>%
  filter(step == "A") %>%
  group_by(BU) %>%
  summarize(studyEmployees = sum(nMatches, na.rm=TRUE)) %>%
  ungroup()

employedByBU <- filledPositions %>%
  group_by(BU) %>%
  summarize(totalEmployees = n()) %>%
  ungroup()

combinedBUComparison <- employedByBU %>%
  left_join(studyEmplByBU, by=c("BU"))

combinedBUComparison <- combinedBUComparison %>%
  mutate(
    pctIncluded = studyEmployees / totalEmployees
  ) %>%
  left_join(buLookup, by=c("BU"))

combinedBUComparison %>%
  filter(!is.na(pctIncluded)) %>%
  mutate(
    grandTotalAll = sum(totalEmployees, na.rm=TRUE),
    grandTotalStudy = sum(studyEmployees, na.rm=TRUE)
    ) %>%
  mutate (
    pctOfAllEmpl = totalEmployees / grandTotalAll,
    pctOfStudyEmpl = studyEmployees / grandTotalStudy
  ) %>%
  mutate(
    pctIncluded = sprintf("%.1f%%", pctIncluded * 100),
    pctOfAllEmpl = sprintf("%.1f%%", pctOfAllEmpl * 100),
    pctOfStudyEmpl = sprintf("%.1f%%", pctOfStudyEmpl * 100)
  ) %>%
  dplyr::select(
    'Bargaining unit' = BU_Desc,
    'Total employees' = totalEmployees,
    'Percent of all employees' = pctOfAllEmpl,
    'Study employees' = studyEmployees,
    'Percent of all employees included' = pctOfStudyEmpl,
    'Percent of BU included' = pctIncluded
  ) %>%
  kable(
    format = "html",  # use "latex" if you're compiling to PDF
    caption = "Relative inclusion of employees in the salary study by bargaining unit",
    align = "lrrrrr"
  ) %>%
  kable_styling(
    full_width = FALSE,
    bootstrap_options = c("striped", "hover", "condensed", "responsive")
  )

combinedBUComparison %>%
  filter(is.na(pctIncluded)) %>%
  dplyr::select(
    `Bargaining unit` = BU_Desc,
    `Total employees` = totalEmployees,
  ) %>%
  kable(
    format = "html",  # use "latex" if you're compiling to PDF
    caption = "Bargaining units not included",
    align = "lr"
  ) %>%
  kable_styling(
    full_width = FALSE,
    bootstrap_options = c("striped", "hover", "condensed", "responsive")
  )

```

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}

# Weight each job code according to the number of occupied positions.
full_p65 <- full_p65 %>%
  mutate(
    wgt_ak_annual_salary = ak_annual_salary * nMatches,
    wgt_mkt_target_annual_salary = market_target_annual_salary * nMatches
  )

p65_by_family = full_p65 %>%
  group_by(family, step) %>%
  summarize(
    nMatches = sum(nMatches, na.rm=TRUE),
    wgt_ak_annual_salary = sum(wgt_ak_annual_salary, na.rm=TRUE),
    wgt_mkt_target_annual_salary = sum(wgt_mkt_target_annual_salary, na.rm=TRUE)
  ) %>%
  ungroup() %>%
  mutate(
    wgt_ak_annual_salary = wgt_ak_annual_salary / nMatches,
    wgt_mkt_target_annual_salary = wgt_mkt_target_annual_salary / nMatches
  )

p65_by_group = full_p65 %>%
  group_by(group, step) %>%
    summarize(
      nMatches = sum(nMatches, na.rm=TRUE),
      wgt_ak_annual_salary = sum(wgt_ak_annual_salary, na.rm=TRUE),
      wgt_mkt_target_annual_salary = sum(wgt_mkt_target_annual_salary, na.rm=TRUE)
    ) %>%
    ungroup() %>%
    mutate(
      wgt_ak_annual_salary = wgt_ak_annual_salary / nMatches,
      wgt_mkt_target_annual_salary = wgt_mkt_target_annual_salary / nMatches
    )


```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
